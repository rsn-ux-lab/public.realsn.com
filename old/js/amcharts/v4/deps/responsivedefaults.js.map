{"version":3,"sources":["webpack:///../../../../../src/.internal/core/responsive/ResponsiveDefaults.ts","webpack:///../../../../../src/.internal/charts/map/SmallMap.ts","webpack:///../../../../../src/.internal/charts/map/ZoomControl.ts"],"names":["__WEBPACK_IMPORTED_MODULE_7__charts_map_ZoomControl__","__webpack_require__","__webpack_exports__","relevant","container","pixelWidth","pixelHeight","state","object","stateId","__WEBPACK_IMPORTED_MODULE_0__charts_axes_AxisRenderer__","states","create","properties","minLabelPosition","maxLabelPosition","__WEBPACK_IMPORTED_MODULE_2__charts_axes_AxisRendererY__","inside","__WEBPACK_IMPORTED_MODULE_3__charts_axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_6__charts_map_SmallMap__","disabled","layout","__WEBPACK_IMPORTED_MODULE_4__charts_Chart__","marginLeft","marginRight","__WEBPACK_IMPORTED_MODULE_5__charts_Legend__","position","__WEBPACK_IMPORTED_MODULE_1__charts_axes_AxisRendererX__","marginTop","marginBottom","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","SmallMap","_super","_this","call","this","_chart","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","className","align","valign","percentHeight","percentWidth","margin","interfaceColors","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","background","fillOpacity","fill","getFor","events","on","moveToPosition","updateMapSize","seriesContainer","createChild","__WEBPACK_IMPORTED_MODULE_1__core_Container__","shouldClone","rectangle","__WEBPACK_IMPORTED_MODULE_2__core_elements_Rectangle__","stroke","strokeWidth","strokeOpacity","Object","__WEBPACK_IMPORTED_MODULE_6__core_utils_Color__","verticalCenter","horizontalCenter","isMeasured","_disposers","push","applyTheme","__WEBPACK_IMPORTED_MODULE_0_tslib__","defineProperty","prototype","_series","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","handleSeriesAdded","handleSeriesRemoved","event","series","newValue","chart","contains","newSeries","clone","removeValue","dataUsers","parent","interactionsEnabled","invalidate","svgPoint","rectPoint","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","zoomLevel","scale","Math","min","x","y","geoPoint","svgPointToGeo","zoomToGeoPoint","get","set","updateRectangle","width","height","ceil","pixelX","pixelY","scaleRatio","afterDraw","moveTo","maskRectangle","processConfig","config","i","len","length","map","hasKey","getKey","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","registeredClasses","__WEBPACK_IMPORTED_MODULE_9__core_utils_InterfaceColorSet__","ZoomControl","padding","plusButton","__WEBPACK_IMPORTED_MODULE_2__core_elements_Button__","label","text","__WEBPACK_IMPORTED_MODULE_7__core_utils_Percent__","fontFamily","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","readerTitle","language","translate","property","fixLayout","undefined","toFront","toBack","minX","maxX","minY","maxY","sprite","target","spritePoint","maxPower","log","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","__WEBPACK_IMPORTED_MODULE_6__core_interaction_Interaction__","body","ev","topParent","hasFocused","__WEBPACK_IMPORTED_MODULE_5__core_utils_Keyboard__","isKey","isFocused","zoomIn","minHeight","stepCount","visible","minWidth","isDown","step","createBackground","__WEBPACK_IMPORTED_MODULE_3__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__"],"mappings":"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","file":"deps/responsivedefaults.js","sourcesContent":["/**\r\n * Defines default Responsive rules\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters } from \"../Sprite\";\r\nimport { SpriteState } from \"../SpriteState\";\r\nimport { Container } from \"../Container\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport { AxisRenderer } from \"../../charts/axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport { AxisRendererCircular } from \"../../charts/axes/AxisRendererCircular\";\r\nimport { Chart } from \"../../charts/Chart\";\r\nimport { Legend } from \"../../charts/Legend\";\r\nimport { SmallMap } from \"../../charts/map/SmallMap\";\r\nimport { ZoomControl } from \"../../charts/map/ZoomControl\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * RULES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Default rules.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Do not create states for objects that do not have any overrides\r\n */\r\nexport default [\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Microcharts and sparklines\r\n\t * W<=100 || H<=100\r\n\t * @todo\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 100) || (container.pixelHeight <= 100)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRenderer) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.minLabelPosition = 1;\r\n\t\t\t\tstate.properties.maxLabelPosition = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Narrow\r\n\t * W<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRendererY) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof AxisRendererCircular) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof SmallMap) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t/*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.height = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}*/\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.layout = \"vertical\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Chart) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.marginLeft = 0;\r\n\t\t\t\tstate.properties.marginRight = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Legend && (object.position == \"left\" || object.position == \"right\")) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.position = \"bottom\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Short\r\n\t * H<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelHeight <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Put vertical axis labels inside\r\n\t\t\tif (object instanceof AxisRendererX) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof AxisRendererCircular) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.inside = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof SmallMap) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\t/*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.width = 100;\r\n\t\t\t\treturn state;\r\n\t\t\t}*/\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.layout = \"horizontal\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Chart) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.marginTop = 0;\r\n\t\t\t\tstate.properties.marginBottom = 0;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof Legend && (object.position == \"bottom\" || object.position == \"top\")) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.position = \"right\";\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * --------------------------------------------------------------------------\r\n\t * Super-small\r\n\t * W<=200 && H<=200\r\n\t */\r\n\r\n\t{\r\n\r\n\t\trelevant: (container: Container): boolean => {\r\n\r\n\t\t\tif ((container.pixelWidth <= 200) && (container.pixelHeight <= 200)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tstate: (object: Sprite, stateId: string): Optional<SpriteState<ISpriteProperties, ISpriteAdapters>> => {\r\n\r\n\t\t\t// Hide legend\r\n\t\t\tif (object instanceof Legend) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\t\t\tif (object instanceof ZoomControl) {\r\n\t\t\t\tlet state = object.states.create(stateId);\r\n\t\t\t\tstate.properties.disabled = true;\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n];\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/responsive/ResponsiveDefaults.ts","/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {SmallMaPproperties}\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ISmallMapAdapters}\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISmallMapEvents}\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t *\r\n\t * @type {Rectangle}\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @type {List<MapSeries>}\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<MapSeries>} Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<MapSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet svgPoint: IPoint = event.svgPoint;\r\n\t\tlet rectPoint: IPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\r\n\r\n\t\tlet zoomLevel: number = this.chart.zoomLevel;\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\tlet x: number = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\r\n\t\tlet y: number = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\r\n\r\n\t\tlet geoPoint: IGeoPoint = this.chart.svgPointToGeo({ x: x, y: y });\r\n\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param {MapChart}  chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\tlet x: number = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\r\n\t\tlet y: number = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\r\n\r\n\t\trectangle.x = x;\r\n\t\trectangle.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tthis.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/SmallMap.ts","/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IZoomControlProperties}\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IZoomControlAdapters}\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IZoomControlEvents}\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t * @type {Button}\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t *\r\n\t * @type {MutableValueDisposer<MapChart>}\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t *\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\tplusButton.width = percent(100);\r\n\t\tplusButton.padding(5, 5, 5, 5);\r\n\t\tplusButton.fontFamily = \"Verdana\";\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.width = percent(100);\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\tminusButton.padding(5, 5, 5, 5);\r\n\t\tminusButton.fontFamily = \"Verdana\";\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\tprotected fixLayout() {\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\t\t\tthis.minusButton.width = percent(100);\r\n\t\t\tthis.thumb.width = percent(100);\r\n\t\t\tthis.plusButton.width = percent(100);\r\n\t\t\tthis.slider.width = percent(100);\r\n\t\t\tthis.minusButton.marginTop = 1;\r\n\t\t\tthis.plusButton.marginBottom = 2;\r\n\t\t\tthis.slider.height = 0;\r\n\t\t\tthis.minusButton.toFront();\r\n\t\t\tthis.plusButton.toBack();\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.maxX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.thumb.minX = 0;\r\n\t\t\tthis.thumb.minY = 0;\r\n\t\t\tthis.thumb.maxY = 0;\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.minusButton.height = percent(100);\r\n\t\t\tthis.minusButton.width = 30;\r\n\t\t\tthis.thumb.height = percent(100);\r\n\t\t\tthis.thumb.width = undefined;\r\n\t\t\tthis.plusButton.height = percent(100);\r\n\t\t\tthis.plusButton.width = 30;\r\n\t\t\tthis.slider.height = percent(100);\r\n\t\t\tthis.slider.width = 0;\r\n\t\t\tthis.minusButton.marginLeft = 2;\r\n\t\t\tthis.plusButton.marginRight = 2;\r\n\t\t\tthis.minusButton.toBack();\r\n\t\t\tthis.plusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param {MapChart}  chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this),\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart),\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"enter\")) {\r\n\t\t\t\t\t\tif (this.minusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomOut()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (this.plusButton.isFocused) {\r\n\t\t\t\t\t\t\tchart.zoomIn()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {MapChart} Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {this} Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/map/ZoomControl.ts"],"sourceRoot":""}